/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package waitingroom;

/**
 *
 * @author boroowa
 */


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import waitingroom.utilities.GButton;
import waitingroom.utilities.GInformationContainer;
import waitingroom.utilities.GPlayerIcon;

/**
 *
 * @author boroowa
 */
public class WaitingRoomPanel extends javax.swing.JPanel {

    /*
     * POLA KLASY
     */

    GInformationContainer ginfo;
    
    private GButton button;
    private GButton button2;

    
    /**
     * Tworzy ten panel i wylącza go gdy błąd
     */
    public WaitingRoomPanel() {
        super();
        
        //zmienianie wielkości okna
            this.setMaximumSize(new Dimension(800,600));
            this.setMaximumSize(new Dimension(800,600));
        
        //ustawienie layoutu
            setLayout(null);
        
        //wczytywanie danych
            try { loadingInformation(); }
            catch (Exception e) {
                System.out.println("Problem with loading, aborted;");
                //System.exit(-1);
            }

            button = new GButton(200,100);
        //button2 = new GButton(300, 200);
        
            this.add(button);
    }
    
    /**
     * Wczytuje dane, jeżeli ich nie wyczyta, to wtedy rzuca śliwką
     * @throws Exception 
     */
    private void loadingInformation() throws Exception{
        
        //stworzenie pojemnika na dane
            ginfo = new GInformationContainer();
        
        //wczytujemy fonty
            try{
                ginfo.fonts.setNormalFont("./fonts/D3Euronism.ttf");
                //ginfo.fonts.setBoldFont("./fonts/D3Euronism_b.ttf");
                //ginfo.fonts.setItalicFont("./fonts/D3Euronism_i.ttf");
            } catch (Exception e) {
                System.out.println("Problem with fonts");
            }
        //wczytujemy grafiki dotyczące przycisków
            try{
                //ginfo.buttonsGraphics.setGraphics(  "./graphics/MainMenu/unpress_button.png", 
                //                                    "./graphics/MainMenu/over_button.png", 
                //                                    "./graphics/MainMenu/press_button.png");
            } catch (Exception e) {
                System.out.println("Problem with graphics");
            }
            
    }
   
    
    @Override 
    public Dimension getPreferredSize(){
        return new Dimension(800,600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @Override
    protected void paintComponent(Graphics g) {
        
        //umożliwienie rysowania po powierzchni 2d
            super.paintComponent(g);
            Graphics2D g2d;
            g2d = (Graphics2D) g;
        
            BufferedImage bg = null;
        //wczytanie tła
            try{
                bg = ImageIO.read(new File("./graphics/WaitingRoomGraphics/waitinroom.png"));
            } catch (Exception e) {
                System.out.println("Problem with read PNG background file");
                System.exit(-1);
            }
     
            g2d.setFont(ginfo.fonts.getNormal().deriveFont(48.0f));
            g2d.setColor(Color.GREEN);
            g2d.drawImage(bg, 0, 0, this);
            g2d.drawString("POCZEKALNIA",20,80);
        
    }
}
